package com.jpro.philosophibackend.dao.impl;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;

import javax.transaction.Transactional;

import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import com.jpro.philosophibackend.dao.CartDAO;
import com.jpro.philosophibackend.domain.Cart;
import com.jpro.philosophibackend.domain.Product;

@EnableTransactionManagement
@Repository("cartDAO")
public class CartDAOImpl implements CartDAO {
	
	@Autowired
	private SessionFactory sessionFactory;
	
	public CartDAOImpl(SessionFactory sessionFactory) {
		
		this.sessionFactory=sessionFactory;		
	}

	@Transactional
	public boolean saveCart(Cart cart) {
		try
		{
		sessionFactory.getCurrentSession().save(cart);
		return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return false;
		}
	}

	@Transactional
	public boolean updateCart(Cart cart) {
		try
		{
		sessionFactory.getCurrentSession().update(cart);
		return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return false;
		}
	}

	@Transactional
	public boolean deleteCart(Cart cart) {
		try
		{
		sessionFactory.getCurrentSession().delete(cart);
		return true;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return false;
		}
	}

	@Transactional
	public boolean deleteCart(int cartId) {
		try {
			sessionFactory.getCurrentSession().delete(getCartById(cartId));
			return true;
		} 
		catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	@Transactional
	public Cart getCartById(int cartId) {
		return (Cart) sessionFactory.getCurrentSession().createQuery("from Cart where cartID ='"+ cartId +"'" ).uniqueResult();
	}

	@Transactional
	public List<Cart> getAllCart() {
		return sessionFactory.getCurrentSession().createQuery("from Cart").list();
	}

	@Transactional
	public List<Cart> getCartsOfUser(String userId) {
		return sessionFactory.getCurrentSession().createQuery("from Cart where cartID='"+userId+"'" ).list();
	}

	@Transactional
	public String getCartStatus(int cartId) {
		return (String) sessionFactory.getCurrentSession().createQuery("select cartStatus from Cart where cartID='"+cartId+"'" ).uniqueResult();
	}

	@Transactional
	public List<Product> getProductsInCart(int cartId) {
		return sessionFactory.getCurrentSession().createQuery("select p from Cart c join c.productOfCart p where userId='"+cartId+"'" ).list();
	}

	@Transactional
	public int getTotalAmount(int cartID) {
		return (Integer) sessionFactory.getCurrentSession().createQuery("select totalCost from Cart where cartID='"+cartID+"'" ).uniqueResult();
	}

	@Transactional
	public void generateBill(int cartId) {
		Cart cart=(Cart) sessionFactory.getCurrentSession().createQuery("from Cart where cartID ='"+ cartId +"'" ).uniqueResult();
		try{
		    PrintWriter writer = new PrintWriter("Bill.txt", "UTF-8");
		    writer.println("Name:"+cart.getDelivery_name());
		    writer.println(cart.getShippingAddress().getStreet()+"\n"+cart.getShippingAddress().getCity()+"\n"+cart.getShippingAddress().getState()+"\n"+cart.getShippingAddress().getPincode());
		    writer.println("Contact"+cart.getUser_contact());
		    writer.println("Totatl:"+cart.getTotalCost());
		    writer.close();
		} catch (IOException e) {
		  System.err.println(e);
		}
		
	}

	public void removeProductFromCart(String productID) {
	 sessionFactory.getCurrentSession().createQuery("update Cart c set c.");		
	}

}
